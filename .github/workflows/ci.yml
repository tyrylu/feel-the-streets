name: Continuous integration
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: Install recent enough python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy
    - name: Install Linux build dependencies
      if: runner.os == 'Linux'
      run: sudo apt install sqlite3 libsqlite3-dev python3-dev libpython3-dev
    - name: Build
      run: cargo build --verbose
    - name: Run tests, skipping Linux due to a weird inventory link failure
      if: runner.os == 'Windows'
      run: cargo test --verbose
    - name: Build in release mode
      run: cargo build --release
    - name: Install python app dependencies
      if: runner.os == 'Windows'
      run: "$env:SKIP_CYTHON = '1';pip install -r app_requirements.txt --no-binary pydantic"
    - name: Install Pyinstaller
      if: runner.os == 'Windows'
      run: pip install pyinstaller==4.1
    - name: Move osm_db extension to the right place
      if: runner.os == 'Windows'
      run: mv target/release/osm_db.dll osm_db.pyd
    - name: Download mod_spatialite
      if: runner.os == 'Windows'
      run: Invoke-WebRequest -outfile spatialite.7z https://trycht.cz/spatialite-loadable-modules-5.0.0-win-amd64.7z
    - name: Unpack the archive
      if: runner.os == 'Windows'
      run: 7z.exe x spatialite.7z
    - name: Add spatialite to path
      if: runner.os == 'Windows'
      run: echo $PWD\spatialite-loadable-modules-5.0.0-win-amd64 >> $env:GITHUB_PATH
    - name: Make pyinstaller happy by making the correctly named copy of geos_c.dll
      if: runner.os == 'Windows'
      run: Copy-Item $PWD\spatialite-loadable-modules-5.0.0-win-amd64\libgeos_c-1.dll $PWD\spatialite-loadable-modules-5.0.0-win-amd64\geos_c.dll
    - name: Build the app executable
      if: runner.os == 'Windows'
      run: pyinstaller run_app.spec
    - name: Prepare deployment directory
      run: mkdir to_deploy
    - name: Copy common artifacts, part 1
      run: cp *.yml to_deploy
    - name: Copy common artifacts, part 2
      run: cp fts.dict to_deploy
    - name: Copy common artifacts, part 3
      run: cp Rocket.toml to_deploy
    - name: Copy common artifacts, part 4
      run: cp -r static to_deploy
    - name: Copy common artifacts, part 5
      run: cp -r templates to_deploy
    - name: Copy Linux artifacts
      if: runner.os == 'Linux'
      run: cp target/release/{oesc,server,worker,create_area,recreate_all_areas,update_area,libosm_db\.so} to_deploy
    - name: Copy Windows artifacts
      if: runner.os == 'Windows'
      run: cp target/release/*.exe to_deploy
    - name: Upload Windows artifacts
      if: runner.os == 'Windows'  
      uses: actions/upload-artifact@v2
      with:
        name: to_deploy_windows
        path: to_deploy
    - name: Upload Linux artifacts
      if: runner.os == 'Linux'  
      uses: actions/upload-artifact@v2
      with:
        name: to_deploy_linux
        path: to_deploy
    - name: Upload Python app binary
      if: runner.os == 'Windows'  
      uses: actions/upload-artifact@v2
      with:
        name: fts_app
        path: dist/fts
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Download Linux build files
      uses: actions/download-artifact@v2
      with:
        name: to_deploy_linux
        path: deploy_to_linux
    - name: Deploy to production
      uses: AEnterprise/rsync-deploy@v1.0
      env:
        DEPLOY_KEY: ${{ secrets.SERVER_SSH_KEY }}
        ARGS: "-zzrvh --delete"
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        FOLDER: "deploy_to_linux/*"
        SERVER_IP: ${{ secrets.SERVER_IP }}
        USERNAME: ${{ secrets.USERNAME }}
        SERVER_DESTINATION: /srv/feel-the-streets